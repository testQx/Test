'''给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。

示例 1:

输入: [1,2,3,4,5,6,7] 和 k = 3
输出: [5,6,7,1,2,3,4]
解释:
向右旋转 1 步: [7,1,2,3,4,5,6]
向右旋转 2 步: [6,7,1,2,3,4,5]
向右旋转 3 步: [5,6,7,1,2,3,4]
示例 2:

输入: [-1,-100,3,99] 和 k = 2
输出: [3,99,-1,-100]
解释:
向右旋转 1 步: [99,-1,-100,3]
向右旋转 2 步: [3,99,-1,-100]
说明:

尽可能想出更多的解决方案，至少有三种不同的方法可以解决这个问题。
要求使用空间复杂度为 O(1) 的 原地 算法。
'''


class Solution:
    def rotate(self, nums: list, k: int) -> None:
        if k > len(nums):
            k = k % len(nums)
        nums[:] = nums[len(nums) - k:] + nums[:len(nums) - k]
        return nums


print(Solution().rotate([1, 2, 3, 4, 5, 6, 7], 3))

# 思路直接切片拼接
# 另一种思路：三次反转，先整个都反转，然后将前n个反转，然后将后面的在反转
# [1, 2, 3, 4, 5, 6, 7]
# [7,6,5,4,3,2,1]
# [5,6,7,1,2,3,4]
